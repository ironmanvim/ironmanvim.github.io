{"version":3,"sources":["Assets/videos/trial.mp4","Components/Notify.js","Components/Chat.js","Components/FullScreenView.js","App.js","serviceWorker.js","index.js","Assets/images/trial.png","Assets/images/Avatar.png"],"names":["module","exports","Notify","iconStyle","fontSize","this","props","size","color","positionStyle","position","top","left","right","bottom","className","display","style","React","Component","ChatSearchBar","onSearchInput","text","target","value","onSearch","type","onChange","ChatListItem","getStatusWithTimestamp","time","Date","toDateString","getOnlineStatus","now","interval","setInterval","forceUpdate","clearInterval","isThisCurrentChat","currentChatId","id","onClick","updateCurrentChat","src","avatar","alt","name","desc","unreadMsgCount","ChatListItems","filteredList","map","listItem","key","lastSeen","messageCount","ChatList","state","search","setState","getFilteredList","chat","list","filter","includes","unread","messages","message","length","messageDeliveryStatus","read","by","data","ChatHeader","closeCurrentChat","ChatLine","showFullScreen","context","image","video","getTime","currentTime","getHours","getMinutes","caption","thumbnail","message_by","chatType","contextTypes","PropTypes","func","defaultProps","ChatContent","loadPreviousChat","previousChatUpdate","createMessagesWithDateObjects","returnMessages","currentDate","i","newDate","getFullYear","getMonth","getDate","push","dateMarker","setTimeout","unreadPointer","scrollIntoView","behavior","endPointer","prevProps","prevState","snapshot","nextProps","nextState","nextContext","removeUnreadPointer","hasPreviousChat","ref","div","EmojiPanelButton","showEmojiPanel","toggleEmojiPanel","onEmojiSelect","buttonProps","children","set","onSelect","ChatInput","onMessageInput","onMessageSubmit","event","preventDefault","updateMessage","uuid","v4","emojiUpdate","emoji","native","messageInput","focus","onSubmit","inp","ChatBody","currentChat","find","Chat","FullScreenView","content","isFullScreen","hideFullScreen","view","url","controls","playing","width","height","childContextTypes","App","require","message_id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12840fd6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trial.24867704.mp4\";","import React from \"react\";\n\nclass Notify extends React.Component {\n    render() {\n        let iconStyle = {\n            fontSize: this.props.size + \"pt\",\n            color: this.props.color,\n        };\n        let positionStyle = {\n            position: \"absolute\",\n        };\n        switch (this.props.position) {\n            case \"top-left\":\n                positionStyle.top = 0;\n                positionStyle.left = 0;\n                break;\n            case \"top-right\":\n                positionStyle.top = 0;\n                positionStyle.right = 0;\n                break;\n            case \"bottom-left\":\n                positionStyle.bottom = 0;\n                positionStyle.left = 0;\n                break;\n            case \"bottom-right\":\n                positionStyle.bottom = 0;\n                positionStyle.right = 0;\n                break;\n            default:\n                break;\n        }\n        return (\n            <span className={this.props.display ? \"notify-icon\" : \"hide\"} style={positionStyle}>\n                <i className=\"fa fa-circle \" style={iconStyle}> </i>\n            </span>\n        );\n    }\n}\n\nexport default Notify;","import React from \"react\";\nimport Notify from './Notify';\nimport PropTypes from 'prop-types';\nimport {Picker as EmojiPicker} from 'emoji-mart';\nimport uuid from 'uuid';\n\nimport '../Assets/css/chat.css';\nimport '../Assets/fontawesome/css/all.css';\nimport 'emoji-mart/css/emoji-mart.css';\n\n\nclass ChatSearchBar extends React.Component {\n    static propTypes = {\n        onSearch: PropTypes.func,\n    };\n\n    onSearchInput = ({target: {value: text}}) => {\n        this.props.onSearch(text);\n    };\n\n    render() {\n        return (\n            <div className=\"chat-search-bar\">\n                <div className=\"chat-search-wrapper\">\n                    <div className=\"chat-search-icon\">\n                        <i className=\"fa fa-search\"> </i>\n                    </div>\n                    <div className=\"chat-search-input\">\n                        <input type=\"text\" onChange={this.onSearchInput}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ChatListItem extends React.Component {\n    static propTypes = {\n        avatar: PropTypes.string,\n        name: PropTypes.string,\n        desc: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.object,\n        ]),\n        time: PropTypes.number,\n        unreadMsgCount: PropTypes.number,\n        currentChatId: PropTypes.number,\n        updateCurrentChat: PropTypes.func,\n    };\n\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            this.forceUpdate();\n        }, 2500);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    getStatusWithTimestamp = () => {\n        const {time} = this.props;\n\n        return (new Date(time)).toDateString();\n    };\n\n    getOnlineStatus = () => {\n        const {time} = this.props;\n\n        return Date.now() - time < 5000;\n    };\n\n    render() {\n        let isThisCurrentChat = \"\";\n        if (this.props.currentChatId === this.props.id) {\n            isThisCurrentChat = \"current\";\n        }\n\n        return (\n            <div\n                className={`chat-list-item ${isThisCurrentChat}`}\n                onClick={this.props.updateCurrentChat}\n            >\n                <div className=\"chat-list-item-image\">\n                    <img src={this.props.avatar} alt=\"\"/>\n                    {\n                        this.getOnlineStatus() ?\n                            <Notify size={\"8\"} position={\"bottom-right\"} color=\"lawngreen\"/> : null\n                    }\n                </div>\n                <div className=\"chat-list-item-info\">\n                    <div className=\"chat-list-item-name\">\n                        {this.props.name}\n                    </div>\n                    <div className=\"chat-list-item-desc\">\n                        {this.props.desc}\n                    </div>\n                </div>\n                <div className=\"chat-list-item-details\">\n                    <div className=\"chat-list-item-time\">\n                        {this.getStatusWithTimestamp()}\n                    </div>\n                    {\n                        this.props.unreadMsgCount > 0 ?\n                            <div className=\"chat-list-item-msg_count\">\n                                {this.props.unreadMsgCount}\n                            </div> : null\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ChatListItems extends React.Component {\n    static propTypes = {\n        filteredList: PropTypes.array,\n        currentChatId: PropTypes.number,\n        updateCurrentChat: PropTypes.func,\n    };\n\n    render() {\n        return (\n            <div className=\"chat-list-items\">\n                {this.props.filteredList.map(listItem =>\n                    <ChatListItem\n                        key={listItem.id}\n                        id={listItem.id}\n                        avatar={listItem.avatar}\n                        desc={listItem.desc}\n                        name={listItem.name}\n                        time={listItem.lastSeen}\n                        unreadMsgCount={listItem.messageCount}\n                        currentChatId={this.props.currentChatId}\n                        updateCurrentChat={() => {\n                            this.props.updateCurrentChat(listItem.id);\n                        }}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nclass ChatList extends React.Component {\n    static propTypes = {\n        chat: PropTypes.object,\n        updateCurrentChat: PropTypes.func,\n    };\n\n    state = {\n        search: \"\",\n    };\n\n    onSearch = (search) => {\n        this.setState({search});\n    };\n\n    getFilteredList = () => {\n        return this.props.chat.list\n            .filter(listItem => listItem.name.includes(this.state.search))\n            .map(listItem => {\n                return {\n                    avatar: listItem.avatar,\n                    name: listItem.name,\n                    id: listItem.id,\n                    messageCount: listItem.unread,\n                    lastSeen: listItem.lastSeen,\n                    desc: (() => {\n                        let {messages} = listItem;\n                        let message = messages[messages.length - 1];\n\n                        let messageDeliveryStatus = null;\n\n                        if (message.read === 0) {\n                            messageDeliveryStatus = <i className=\"far fa-clock\"> </i>;\n                        } else if (message.read === 1) {\n                            messageDeliveryStatus = <i className=\"fas fa-check\"> </i>\n                        } else if (message.read === 2) {\n                            messageDeliveryStatus = <i className=\"fas fa-check-double\"> </i>\n                        }\n\n                        if (message.type === \"text\") {\n                            return (\n                                <span>\n                                    {\n                                        message.by === 0 &&\n                                        <div className=\"chat-message_delivery_status\">\n                                            {messageDeliveryStatus}\n                                        </div>\n                                    }\n                                    {message.data}\n                                </span>\n                            );\n                        } else if (message.type === \"image\") {\n                            return (\n                                <span>\n                                    {message.by === 0 && messageDeliveryStatus}\n                                    <i className=\"far fa-file-image\"> </i> image\n                                </span>\n                            );\n                        } else if (message.type === \"video\") {\n                            return (\n                                <span>\n                                    {message.by === 0 && messageDeliveryStatus}\n                                    <i className=\"far fa-file-video\"> </i> video\n                                </span>\n                            );\n                        }\n                    })(),\n                };\n            });\n    };\n\n    render() {\n        return (\n            <div className=\"chat-list\">\n                <ChatSearchBar\n                    onSearch={this.onSearch}\n                />\n                <ChatListItems\n                    filteredList={this.getFilteredList()}\n                    currentChatId={this.props.chat.currentChatId}\n                    updateCurrentChat={this.props.updateCurrentChat}\n                />\n            </div>\n        )\n    }\n}\n\nclass ChatHeader extends React.Component {\n    static propTypes = {\n        avatar: PropTypes.string,\n        name: PropTypes.string,\n        time: PropTypes.number,\n        closeCurrentChat: PropTypes.func,\n    };\n\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            this.forceUpdate();\n        }, 2500);\n    }\n\n    getStatusWithTimestamp = () => {\n        const {time} = this.props;\n\n        return (new Date(time)).toDateString();\n    };\n\n    getOnlineStatus = () => {\n        const {time} = this.props;\n\n        return Date.now() - time < 5000;\n    };\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    render() {\n        return (\n            <div className=\"chat-header\">\n                <div className=\"chat-list-item-image\">\n                    <img src={this.props.avatar} alt=\"\"/>\n                    {\n                        this.getOnlineStatus() ?\n                            <Notify size={\"8\"} position={\"bottom-right\"} color=\"lawngreen\"/> : null\n                    }\n                </div>\n                <div className=\"chat-list-item-info\">\n                    <div className=\"chat-list-item-name\">\n                        {this.props.name}\n                    </div>\n                    <div className=\"chat-list-item-desc\">\n                        {this.getStatusWithTimestamp()}\n                    </div>\n                </div>\n                <div className=\"chat-close\" onClick={this.props.closeCurrentChat}>\n                    <i className=\"fas fa-times\"> </i>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ChatLine extends React.Component {\n    static propTypes = {\n        message: PropTypes.object,\n        chatType: PropTypes.string,\n    };\n\n    static contextTypes = {\n        showFullScreen: PropTypes.func,\n    };\n\n    static defaultProps = {\n        by: 0,\n    };\n\n    showFullScreen = () => {\n        const {message} = this.props;\n\n        if (message.type === 'image') {\n            this.context.showFullScreen(message.data.image, 'image');\n        } else if (message.type === 'video') {\n            this.context.showFullScreen(message.data.video, 'video');\n        }\n    };\n\n    getTime = () => {\n        const {message: {time}} = this.props;\n        let currentTime = new Date(time);\n\n        return `${currentTime.getHours()}:${currentTime.getMinutes()}`;\n    };\n\n    render() {\n        const {message} = this.props;\n\n        let data = null;\n\n        if (message.type === \"text\") {\n            data = message.data;\n        } else if (message.type === \"image\") {\n            data = (\n                <div>\n                    <div className=\"chat-line-image\" onClick={this.showFullScreen}>\n                        <img src={message.data.image} alt=\"\"/>\n                    </div>\n                    {message.data.caption}\n                </div>\n            );\n        } else if (message.type === \"video\") {\n            data = (\n                <div>\n                    <div className=\"chat-line-video\" onClick={this.showFullScreen}>\n                        <img src={message.data.thumbnail} alt=\"\"/>\n                        <div className=\"chat-video-play-icon\">\n                            <i className=\"fa fa-play\"> </i>\n                        </div>\n                    </div>\n                    {message.data.caption}\n                </div>\n            );\n        }\n\n        let message_by = message.by === 0 ? \"me\" : \"you\";\n\n        let messageDeliveryStatus = null;\n\n        if (message.read === 0) {\n            messageDeliveryStatus = <i className=\"far fa-clock\"> </i>;\n        } else if (message.read === 1) {\n            messageDeliveryStatus = <i className=\"fas fa-check\"> </i>\n        } else if (message.read === 2) {\n            messageDeliveryStatus = <i className=\"fas fa-check-double\"> </i>\n        }\n\n        return (\n            <div className=\"chat-line\">\n                <div className={`chat-line-wrapper ${message_by}`}>\n                    {\n                        this.props.chatType === \"group\" && message.by !== 0 &&\n                        <div className={`chat-message_by ${message_by}`}>\n                            {message.by}\n                        </div>\n                    }\n                    {data}\n                    <div className={`chat-message-time ${message_by}`}>\n                        {this.getTime()}\n                        {\n                            message_by === \"me\" &&\n                            <div className=\"chat-message_delivery_status\">\n                                {messageDeliveryStatus}\n                            </div>\n                        }\n                    </div>\n                </div>\n            </div>\n        );\n\n    }\n}\n\nclass ChatContent extends React.Component {\n    static propTypes = {\n        messages: PropTypes.array,\n        removeUnreadPointer: PropTypes.func,\n        currentChatId: PropTypes.number,\n        loadPreviousChat: PropTypes.func,\n        hasPreviousChat: PropTypes.bool,\n        chatType: PropTypes.string,\n    };\n\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.unreadPointer) {\n                this.unreadPointer.scrollIntoView({\n                    behavior: \"smooth\"\n                });\n            } else {\n                this.endPointer.scrollIntoView({\n                    behavior: \"smooth\"\n                });\n            }\n        }, 1000 / 60);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (!this.previousChatUpdate) {\n            setTimeout(() => {\n                if (this.unreadPointer) {\n                    this.unreadPointer.scrollIntoView({\n                        behavior: \"smooth\"\n                    });\n                } else {\n                    this.endPointer.scrollIntoView({\n                        behavior: \"smooth\"\n                    });\n                }\n            }, 1000 / 60);\n        }\n        this.previousChatUpdate = false;\n    }\n\n    UNSAFE_componentWillUpdate(nextProps, nextState, nextContext) {\n        if (this.unreadPointer) {\n            this.props.removeUnreadPointer(this.props.currentChatId);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.unreadPointer) {\n            this.props.removeUnreadPointer(this.props.currentChatId);\n        }\n    }\n\n    loadPreviousChat = () => {\n        this.previousChatUpdate = true;\n        this.props.loadPreviousChat(this.props.currentChatId);\n    };\n\n    createMessagesWithDateObjects = () => {\n        let {messages} = this.props;\n\n        let returnMessages = [];\n        let currentDate = 0;\n\n        for (let i = 0; i < messages.length; i++) {\n            let newDate = new Date(messages[i].time);\n\n            if (!messages[i].time\n                || (currentDate !== 0\n                    && currentDate.getFullYear() === newDate.getFullYear()\n                    && currentDate.getMonth() === newDate.getMonth()\n                    && currentDate.getDate() === newDate.getDate())) {\n            } else {\n                returnMessages.push({\n                    dateMarker: messages[i].time,\n                });\n                currentDate = newDate;\n            }\n            returnMessages.push(messages[i]);\n        }\n\n        return returnMessages;\n    };\n\n    getDate = (time) => {\n        let currentTime = new Date(time);\n\n        return `${currentTime.getDate()}/${currentTime.getMonth()}/${currentTime.getFullYear()}`;\n    };\n\n    render() {\n        const messages = this.createMessagesWithDateObjects();\n\n        return (\n            <div className=\"chat-content\">\n                {\n                    this.props.hasPreviousChat &&\n                    <div className=\"chat-load_previous\" onClick={this.loadPreviousChat}>\n                        Load Previous\n                    </div>\n                }\n                {\n                    messages.map(message => {\n                        if (message.unreadPointer) {\n                            return (\n                                <div\n                                    key=\"unreadPointer\"\n                                    className=\"chat-unread_messages\"\n                                    ref={(div) => {\n                                        this.unreadPointer = div;\n                                    }}\n                                >\n                                    Unread Messages\n                                </div>\n                            )\n                        } else if (message.dateMarker) {\n                            return (\n                                <div\n                                    key={`Date-${message.dateMarker}`}\n                                    className=\"chat-date_marker\"\n                                >\n                                    {this.getDate(message.dateMarker)}\n                                </div>\n                            )\n                        }\n                        return (\n                            <ChatLine\n                                message={message}\n                                key={message.id}\n                                chatType={this.props.chatType}\n                            />\n                        );\n                    })\n                }\n                <div\n                    ref={(div) => {\n                        this.endPointer = div;\n                    }}\n                >\n                </div>\n            </div>\n        );\n    }\n}\n\nclass EmojiPanelButton extends React.Component {\n    static propTypes = {\n        onEmojiSelect: PropTypes.func,\n    };\n\n    state = {\n        showEmojiPanel: false,\n    };\n\n    toggleEmojiPanel = () => {\n        this.setState({\n            showEmojiPanel: !this.state.showEmojiPanel,\n        });\n    };\n\n    render() {\n        const {onEmojiSelect, ...buttonProps} = this.props;\n        return (\n            <span style={{position: \"relative\"}}>\n            <button className=\"emoji\" onClick={this.toggleEmojiPanel} {...buttonProps}>\n                {this.props.children}\n            </button>\n                {\n                    this.state.showEmojiPanel ?\n                        <EmojiPicker\n                            set='google'\n                            style={{\n                                position: \"absolute\",\n                                bottom: \"30px\",\n                                right: \"0\",\n                            }}\n                            onSelect={onEmojiSelect}\n                        /> : null\n                }\n            </span>\n        );\n    }\n}\n\nclass ChatInput extends React.Component {\n    static propTypes = {\n        updateMessage: PropTypes.func,\n    };\n\n    state = {\n        message: \"\",\n        type: \"\",\n    };\n\n    onMessageInput = ({target: {value: message}}) => {\n        this.setState({\n            message,\n            type: \"text\",\n        });\n    };\n\n    onMessageSubmit = (event) => {\n        event.preventDefault();\n        if (this.state.message === \"\") {\n            return;\n        }\n        const {updateMessage} = this.props;\n\n        let message = {\n            data: this.state.message,\n            type: this.state.type,\n            id: uuid.v4(),\n            by: 0,\n            time: Date.now(),\n            read: 0,\n        };\n\n        this.setState({\n            message: \"\",\n            type: \"\",\n        });\n\n        updateMessage(message);\n    };\n\n    emojiUpdate = (emoji) => {\n        this.setState({\n            message: this.state.message + emoji.native,\n            type: \"text\",\n        });\n        this.messageInput.focus();\n    };\n\n    render() {\n        return (\n            <form onSubmit={this.onMessageSubmit}>\n                <div className=\"chat-input\">\n                    <input\n                        type=\"text\"\n                        onChange={this.onMessageInput}\n                        value={this.state.message}\n                        ref={(inp) => this.messageInput = inp}\n                    />\n                    <button type=\"submit\" className=\"button\"><i className=\"far fa-paper-plane\"> </i></button>\n                    <button type=\"button\" className=\"button\"><i className=\"fas fa-paperclip\"> </i></button>\n                    <EmojiPanelButton type=\"button\" className=\"button\" onEmojiSelect={this.emojiUpdate}>\n                        <i className=\"far fa-smile\"> </i>\n                    </EmojiPanelButton>\n                </div>\n            </form>\n        );\n    }\n}\n\nclass ChatBody extends React.Component {\n    static propTypes = {\n        chat: PropTypes.object,\n        updateMessage: PropTypes.func,\n        closeCurrentChat: PropTypes.func,\n        removeUnreadPointer: PropTypes.func,\n        loadPreviousChat: PropTypes.func,\n    };\n\n    updateMessage = (message) => {\n        let {currentChatId} = this.props.chat;\n\n        this.props.updateMessage(currentChatId, message);\n    };\n\n\n    render() {\n        const {currentChatId} = this.props.chat;\n        const currentChat = this.props.chat.list.find(listItem => listItem.id === currentChatId);\n\n        return (\n            <div className=\"chat-body\">\n                {\n                    currentChatId ?\n                        <span>\n                        <ChatHeader\n                            name={currentChat.name}\n                            time={currentChat.lastSeen}\n                            avatar={currentChat.avatar}\n                            closeCurrentChat={this.props.closeCurrentChat}\n                        />\n                        <ChatContent\n                            hasPreviousChat={currentChat.hasPreviousChat}\n                            currentChatId={currentChatId}\n                            messages={currentChat.messages}\n                            removeUnreadPointer={this.props.removeUnreadPointer}\n                            loadPreviousChat={this.props.loadPreviousChat}\n                            chatType={currentChat.chatType}\n                        />\n                        <ChatInput\n                            updateMessage={this.updateMessage}\n                        />\n                    </span> : null\n                }\n            </div>\n        )\n    }\n}\n\nexport default class Chat extends React.Component {\n    static propTypes = {\n        chat: PropTypes.object.isRequired,\n        updateCurrentChat: PropTypes.func,\n        updateMessage: PropTypes.func,\n        closeCurrentChat: PropTypes.func,\n        removeUnreadPointer: PropTypes.func,\n        loadPreviousChat: PropTypes.func,\n    };\n\n    updateCurrentChat = (id) => {\n        this.props.updateCurrentChat(id);\n    };\n\n    render() {\n        return (\n            <div className=\"chat\">\n                <ChatList\n                    chat={this.props.chat}\n                    updateCurrentChat={this.updateCurrentChat}\n                />\n                <ChatBody\n                    chat={this.props.chat}\n                    updateMessage={this.props.updateMessage}\n                    closeCurrentChat={this.props.closeCurrentChat}\n                    removeUnreadPointer={this.props.removeUnreadPointer}\n                    loadPreviousChat={this.props.loadPreviousChat}\n                />\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport ReactPlayer from 'react-player';\nimport PropTypes from 'prop-types';\n\nimport \"../Assets/css/full-screen.css\";\n\nexport default class FullScreenView extends React.Component {\n    state = {\n        content: null,\n        type: null,\n        isFullScreen: false,\n    };\n\n    static childContextTypes = {\n        showFullScreen: PropTypes.func,\n    };\n\n    showFullScreen = (content, type) => {\n        this.setState({\n            content,\n            type,\n            isFullScreen: true,\n        });\n    };\n\n    hideFullScreen = () => {\n        this.setState({\n            content: null,\n            type: null,\n            isFullScreen: false,\n        });\n    };\n\n    getChildContext() {\n        return {\n            showFullScreen: this.showFullScreen,\n        }\n    }\n\n    render() {\n        const {children} = this.props;\n        let view = null;\n        if (this.state.isFullScreen) {\n            if (this.state.type === \"image\") {\n                view = (\n                    <div className=\"image-view\">\n                        <img src={this.state.content} alt=\"view\"/>\n                    </div>\n                );\n            } else if (this.state.type === \"video\") {\n                view = (\n                    <div className=\"image-view\">\n                        <ReactPlayer\n                            url={this.state.content}\n                            controls\n                            playing\n                            width='100%'\n                            height='100%'\n                        />\n                    </div>\n                );\n            }\n        }\n\n        return (\n            <div>\n                {children}\n                {\n                    this.state.isFullScreen ?\n                        <div className=\"full-screen\">\n                            <div\n                                className=\"exit\"\n                                onClick={this.hideFullScreen}\n                            >\n                                &times;\n                            </div>\n                            <div className=\"content centered\">\n                                {view}\n                            </div>\n                        </div> : null\n                }\n            </div>\n        );\n    }\n}","import React from 'react';\nimport Chat from './Components/Chat';\nimport uuid from 'uuid';\n\nimport './App.css';\nimport FullScreenView from \"./Components/FullScreenView\";\n\nclass App extends React.Component {\n    state = {\n        chat: {\n            list: [\n                {\n                    id: 1,\n                    name: \"Vishal\",\n                    avatar: require(\"./Assets/images/Avatar.png\"),\n                    messages: [\n                        {\n                            id: 1,\n                            by: \"you\",\n                            data: \"222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222\",\n                            time: 1, type: \"text\",\n                        },\n                        {\n                            id: 2,\n                            by: 0,\n                            data: \"2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222\",\n                            time: 2, type: \"text\",\n                            read: 0 // wait\n                        },\n                        {\n                            id: 3,\n                            by: 0,\n                            data: \"Hello\",\n                            time: 3,\n                            type: \"text\",\n                            read: 1 // delivered to server\n                        },\n                        {\n                            id: 4,\n                            by: \"you\",\n                            data: \"Hi\",\n                            time: 4,\n                            type: \"text\"\n                        },\n                        {\n                            unreadPointer: true,\n                        },\n                        {\n                            id: 5,\n                            by: 0,\n                            data: {\n                                image: require(\"./Assets/images/trial.png\"),\n                                caption: \"Another Caption for image\"\n                            },\n                            time: 5,\n                            type: \"image\",\n                            read: 2, // read\n                        },\n                        {\n                            id: 7,\n                            by: \"you\",\n                            data: {\n                                thumbnail: require(\"./Assets/images/trial.png\"),\n                                video: require(\"./Assets/videos/trial.mp4\"),\n                                caption: \"Avengers End Game\",\n                            },\n                            type: \"video\",\n                            time: 6,\n                        },\n                        {\n                            id: 6,\n                            by: 0,\n                            data: {\n                                image: require(\"./Assets/images/trial.png\"),\n                                caption: \"A best Avatar Caption\",\n                            },\n                            type: \"image\",\n                            time: 7,\n                        },\n                    ],\n                    lastSeen: Date.now(),\n                    unread: 3,\n                    hasPreviousChat: true,\n                    chatType: \"group\"\n                }, {\n                    id: 2,\n                    name: \"Vishnu\",\n                    avatar: require(\"./Assets/images/Avatar.png\"),\n                    messages: [\n                        {id: 1, by: 0, data: \"Hello\", time: 1, type: \"text\"},\n                        {id: 2, by: \"you\", data: \"Hi\", time: 2, type: \"text\"},\n                        {id: 3, by: 0, data: \"Hello\", time: 3, type: \"text\"},\n                        {id: 4, by: \"you\", data: \"Hi\", time: 4, type: \"text\"},\n                    ],\n                    lastSeen: 2,\n                    unread: 0,\n                    hasPreviousChat: false,\n                    chatType: \"individual\",\n                },\n            ],\n            currentChatId: null,\n        },\n    };\n\n    updateCurrentChat = (id) => {\n        this.setState((prevState) => {\n            return {\n                chat: {\n                    ...prevState.chat,\n                    currentChatId: id,\n                    list: prevState.chat.list.map(listItem => {\n                        if (listItem.id === id) {\n                            return {\n                                ...listItem,\n                                unread: 0,\n                            };\n                        }\n                        return listItem;\n                    }),\n                }\n            }\n        });\n    };\n\n    removeUnreadPointer = (id) => {\n        this.setState((prevState) => {\n            return {\n                chat: {\n                    ...prevState.chat,\n                    list: prevState.chat.list.map(listItem => {\n                        if (listItem.id === id) {\n                            return {\n                                ...listItem,\n                                messages: listItem.messages.filter(message => message.unreadPointer !== true),\n                            };\n                        }\n                        return listItem;\n                    }),\n                }\n            }\n        });\n    };\n\n    closeCurrentChat = () => {\n        this.setState({\n            chat: {\n                ...this.state.chat,\n                currentChatId: null,\n            }\n        })\n    };\n\n    loadPreviousChat = (id) => {\n        this.setState((prevState) => {\n            return {\n                chat: {\n                    ...prevState.chat,\n                    list: prevState.chat.list.map(listItem => {\n                        if (listItem.id === id) {\n                            return {\n                                ...listItem,\n                                messages: [\n                                    {id: uuid.v4(), by: 0, data: \"Previous Message\", time: 1, type: \"text\"},\n                                    {id: uuid.v4(), by: \"Arun\", data: \"Previous Message\", time: 1, type: \"text\"},\n                                    ...listItem.messages,\n                                ],\n                            };\n                        }\n                        return listItem;\n                    }),\n                }\n            }\n        });\n    };\n\n    updateMessage = (id, message) => {\n        const {id: message_id} = message;\n\n        this.setState((prevState) => {\n            return {\n                chat: {\n                    ...prevState.chat,\n                    list: prevState.chat.list.map(listItem => {\n                        if (listItem.id === id) {\n                            return {\n                                ...listItem,\n                                messages: [\n                                    ...listItem.messages,\n                                    message,\n                                ],\n                            };\n                        }\n                        return listItem;\n                    }),\n                }\n            };\n        });\n        setTimeout(() => {\n            this.setState((prevState) => {\n                return {\n                    chat: {\n                        ...prevState.chat,\n                        list: prevState.chat.list.map(listItem => {\n                            if (listItem.id === id) {\n                                return {\n                                    ...listItem,\n                                    messages: listItem.messages.map(message => {\n                                        if(message_id === message.id) {\n                                            return {\n                                                ...message,\n                                                read: 1,\n                                            }\n                                        }\n                                        return message;\n                                    }),\n                                };\n                            }\n                            return listItem;\n                        }),\n                    }\n                };\n            });\n        }, 2500)\n    };\n\n    render() {\n        return (\n            <FullScreenView>\n                <div className=\"App\">\n                    <Chat\n                        chat={this.state.chat}\n                        updateCurrentChat={this.updateCurrentChat}\n                        closeCurrentChat={this.closeCurrentChat}\n                        updateMessage={this.updateMessage}\n                        removeUnreadPointer={this.removeUnreadPointer}\n                        loadPreviousChat={this.loadPreviousChat}\n                    />\n                </div>\n            </FullScreenView>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/trial.b337d9e6.png\";","module.exports = __webpack_public_path__ + \"static/media/Avatar.037763eb.png\";"],"sourceRoot":""}