{"version":3,"sources":["Assets/images/trial.png","Assets/images/Avatar.png","Assets/videos/trial.mp4","Components/Notify.js","Components/URLMetadata.js","Components/Chat.js","Components/FullScreenView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Notify","iconStyle","fontSize","this","props","size","color","positionStyle","position","top","left","right","bottom","className","display","style","React","Component","URLMetadata","state","loading","metadata","error","setState","urlMetadata","url","then","console","log","setTimeout","prevProps","prevState","snapshot","type","width","src","image","alt","href","target","rel","title","description","ChatSearchBar","onSearchInput","text","value","onSearch","onChange","ChatListItem","getStatusWithTimestamp","time","Date","toDateString","getOnlineStatus","now","interval","setInterval","forceUpdate","clearInterval","isThisCurrentChat","currentChatId","id","onClick","updateCurrentChat","avatar","name","desc","unreadMsgCount","ChatListItems","filteredList","map","listItem","key","lastSeen","messageCount","ChatList","search","getFilteredList","chat","list","filter","includes","unread","messages","message","length","messageDeliveryStatus","read","by","data","ChatHeader","closeCurrentChat","ChatLine","showFullScreen","context","video","getTime","currentTime","getHours","getMinutes","getConvertedMessage","webPageRegex","link","split","word","index","match","linkAndMessage","caption","thumbnail","message_by","chatType","contextTypes","PropTypes","func","defaultProps","ChatContent","loadPreviousChat","previousChatUpdate","createMessagesWithDateObjects","returnMessages","currentDate","i","newDate","getFullYear","getMonth","getDate","push","dateMarker","unreadPointer","scrollIntoView","behavior","endPointer","nextProps","nextState","nextContext","removeUnreadPointer","hasPreviousChat","ref","div","EmojiPanelButton","showEmojiPanel","toggleEmojiPanel","onEmojiSelect","buttonProps","children","set","onSelect","ChatInput","getLink","forEach","onMessageInput","onMessageSubmit","event","preventDefault","updateMessage","uuid","v4","emojiUpdate","emoji","native","messageInput","focus","onSubmit","inp","ChatBody","currentChat","find","Chat","FullScreenView","content","isFullScreen","hideFullScreen","view","controls","playing","height","childContextTypes","App","require","message_id","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.85b7a086.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trial.b337d9e6.png\";","module.exports = __webpack_public_path__ + \"static/media/Avatar.037763eb.png\";","module.exports = __webpack_public_path__ + \"static/media/trial.24867704.mp4\";","import React from \"react\";\n\nclass Notify extends React.Component {\n    render() {\n        let iconStyle = {\n            fontSize: this.props.size + \"pt\",\n            color: this.props.color,\n        };\n        let positionStyle = {\n            position: \"absolute\",\n        };\n        switch (this.props.position) {\n            case \"top-left\":\n                positionStyle.top = 0;\n                positionStyle.left = 0;\n                break;\n            case \"top-right\":\n                positionStyle.top = 0;\n                positionStyle.right = 0;\n                break;\n            case \"bottom-left\":\n                positionStyle.bottom = 0;\n                positionStyle.left = 0;\n                break;\n            case \"bottom-right\":\n                positionStyle.bottom = 0;\n                positionStyle.right = 0;\n                break;\n            default:\n                break;\n        }\n        return (\n            <span className={this.props.display ? \"notify-icon\" : \"hide\"} style={positionStyle}>\n                <i className=\"fa fa-circle \" style={iconStyle}> </i>\n            </span>\n        );\n    }\n}\n\nexport default Notify;","import React from \"react\";\nimport urlMetadata from 'url-metadata';\nimport ReactLoading from 'react-loading';\nimport PropTypes from 'prop-types';\n\nimport '../Assets/css/metadata.css';\n\nexport default class URLMetadata extends React.Component {\n    static propTypes = {\n        url: PropTypes.string,\n    };\n\n    state = {\n        loading: false,\n        metadata: null,\n        error: null,\n    };\n\n    componentDidMount() {\n        this.setState({\n            loading: true,\n        });\n        urlMetadata(`https://cors-anywhere.herokuapp.com/${this.props.url}`).then(\n            (metadata) => {\n                this.setState({\n                    loading: false,\n                    metadata,\n                });\n                console.log(metadata);\n            },\n            function (error) {\n                this.setState({\n                    loading: false,\n                    error,\n                });\n                console.log(error);\n            });\n        setTimeout(() => {\n            if(this.state.loading) {\n                this.setState({\n                    loading: false,\n                    error: true,\n                });\n            }\n        }, 10000);\n\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        // if(this.props.url !== prevProps.url) {\n        //     console.log(this.props.url);\n        //     this.setState({\n        //         loading: true,\n        //     });\n        //     urlMetadata(`https://cors-anywhere.herokuapp.com/${this.props.url}`).then(\n        //         (metadata) => {\n        //             this.setState({\n        //                 loading: false,\n        //                 metadata,\n        //             });\n        //             console.log(metadata);\n        //         },\n        //         function (error) {\n        //             this.setState({\n        //                 loading: false,\n        //                 error,\n        //             });\n        //             console.log(error);\n        //         })\n        // }\n    }\n\n    render() {\n        return (\n            <div className=\"metadata\">\n                {\n                    this.state.loading ? (\n                        <div className=\"metadata-loading\">\n                            <ReactLoading type={\"bars\"} width={50} color={\"#43425D\"}/>\n                        </div>\n                    ) : (\n                        !this.state.error && this.state.metadata ? (\n                            <div className=\"metadata-data\">\n                                <div className=\"metadata-favicon\">\n                                    <img src={`${this.state.metadata.image}`} alt=\"\"/>\n                                </div>\n                                <div className=\"metadata-info\">\n                                    <div className=\"metadata-title\">\n                                        <a href={this.props.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                                            {this.state.metadata.title}\n                                        </a>\n                                    </div>\n                                    <div className=\"metadata-desc\">\n                                        {this.state.metadata.description}\n                                    </div>\n                                </div>\n                            </div>\n                        ) : null)\n                }\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport Notify from './Notify';\nimport PropTypes from 'prop-types';\nimport {Picker as EmojiPicker} from 'emoji-mart';\nimport uuid from 'uuid';\nimport URLMetadata from './URLMetadata';\n\nimport '../Assets/css/chat.css';\nimport '../Assets/fontawesome/css/all.css';\nimport 'emoji-mart/css/emoji-mart.css';\n\n\nclass ChatSearchBar extends React.Component {\n    static propTypes = {\n        onSearch: PropTypes.func,\n    };\n\n    onSearchInput = ({target: {value: text}}) => {\n        this.props.onSearch(text);\n    };\n\n    render() {\n        return (\n            <div className=\"chat-search-bar\">\n                <div className=\"chat-search-wrapper\">\n                    <div className=\"chat-search-icon\">\n                        <i className=\"fa fa-search\"> </i>\n                    </div>\n                    <div className=\"chat-search-input\">\n                        <input type=\"text\" onChange={this.onSearchInput}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ChatListItem extends React.Component {\n    static propTypes = {\n        avatar: PropTypes.string,\n        name: PropTypes.string,\n        desc: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.object,\n        ]),\n        time: PropTypes.number,\n        unreadMsgCount: PropTypes.number,\n        currentChatId: PropTypes.number,\n        updateCurrentChat: PropTypes.func,\n    };\n\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            this.forceUpdate();\n        }, 2500);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    getStatusWithTimestamp = () => {\n        const {time} = this.props;\n\n        return (new Date(time)).toDateString();\n    };\n\n    getOnlineStatus = () => {\n        const {time} = this.props;\n\n        return Date.now() - time < 5000;\n    };\n\n    render() {\n        let isThisCurrentChat = \"\";\n        if (this.props.currentChatId === this.props.id) {\n            isThisCurrentChat = \"current\";\n        }\n\n        return (\n            <div\n                className={`chat-list-item ${isThisCurrentChat}`}\n                onClick={this.props.updateCurrentChat}\n            >\n                <div className=\"chat-list-item-image\">\n                    <img src={this.props.avatar} alt=\"\"/>\n                    {\n                        this.getOnlineStatus() ?\n                            <Notify size={\"8\"} position={\"bottom-right\"} color=\"lawngreen\"/> : null\n                    }\n                </div>\n                <div className=\"chat-list-item-info\">\n                    <div className=\"chat-list-item-name\">\n                        {this.props.name}\n                    </div>\n                    <div className=\"chat-list-item-desc\">\n                        {this.props.desc}\n                    </div>\n                </div>\n                <div className=\"chat-list-item-details\">\n                    <div className=\"chat-list-item-time\">\n                        {this.getStatusWithTimestamp()}\n                    </div>\n                    {\n                        this.props.unreadMsgCount > 0 ?\n                            <div className=\"chat-list-item-msg_count\">\n                                {this.props.unreadMsgCount}\n                            </div> : null\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ChatListItems extends React.Component {\n    static propTypes = {\n        filteredList: PropTypes.array,\n        currentChatId: PropTypes.number,\n        updateCurrentChat: PropTypes.func,\n    };\n\n    render() {\n        return (\n            <div className=\"chat-list-items\">\n                {this.props.filteredList.map(listItem =>\n                    <ChatListItem\n                        key={listItem.id}\n                        id={listItem.id}\n                        avatar={listItem.avatar}\n                        desc={listItem.desc}\n                        name={listItem.name}\n                        time={listItem.lastSeen}\n                        unreadMsgCount={listItem.messageCount}\n                        currentChatId={this.props.currentChatId}\n                        updateCurrentChat={() => {\n                            this.props.updateCurrentChat(listItem.id);\n                        }}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nclass ChatList extends React.Component {\n    static propTypes = {\n        chat: PropTypes.object,\n        updateCurrentChat: PropTypes.func,\n    };\n\n    state = {\n        search: \"\",\n    };\n\n    onSearch = (search) => {\n        this.setState({search});\n    };\n\n    getFilteredList = () => {\n        return this.props.chat.list\n            .filter(listItem => listItem.name.includes(this.state.search))\n            .map(listItem => {\n                return {\n                    avatar: listItem.avatar,\n                    name: listItem.name,\n                    id: listItem.id,\n                    messageCount: listItem.unread,\n                    lastSeen: listItem.lastSeen,\n                    desc: (() => {\n                        let {messages} = listItem;\n                        let message = messages[messages.length - 1];\n\n                        let messageDeliveryStatus = null;\n\n                        if (message.read === 0) {\n                            messageDeliveryStatus = <i className=\"far fa-clock\"> </i>;\n                        } else if (message.read === 1) {\n                            messageDeliveryStatus = <i className=\"fas fa-check\"> </i>\n                        } else if (message.read === 2) {\n                            messageDeliveryStatus = <i className=\"fas fa-check-double\"> </i>\n                        }\n\n                        if (message.type === \"text\") {\n                            return (\n                                <span>\n                                    {\n                                        message.by === 0 &&\n                                        <div className=\"chat-message_delivery_status\">\n                                            {messageDeliveryStatus}\n                                        </div>\n                                    }\n                                    {message.data}\n                                </span>\n                            );\n                        } else if (message.type === \"image\") {\n                            return (\n                                <span>\n                                    {message.by === 0 && messageDeliveryStatus}\n                                    <i className=\"far fa-file-image\"> </i> image\n                                </span>\n                            );\n                        } else if (message.type === \"video\") {\n                            return (\n                                <span>\n                                    {message.by === 0 && messageDeliveryStatus}\n                                    <i className=\"far fa-file-video\"> </i> video\n                                </span>\n                            );\n                        }\n                    })(),\n                };\n            });\n    };\n\n    render() {\n        return (\n            <div className=\"chat-list\">\n                <ChatSearchBar\n                    onSearch={this.onSearch}\n                />\n                <ChatListItems\n                    filteredList={this.getFilteredList()}\n                    currentChatId={this.props.chat.currentChatId}\n                    updateCurrentChat={this.props.updateCurrentChat}\n                />\n            </div>\n        )\n    }\n}\n\nclass ChatHeader extends React.Component {\n    static propTypes = {\n        avatar: PropTypes.string,\n        name: PropTypes.string,\n        time: PropTypes.number,\n        closeCurrentChat: PropTypes.func,\n    };\n\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            this.forceUpdate();\n        }, 2500);\n    }\n\n    getStatusWithTimestamp = () => {\n        const {time} = this.props;\n\n        return (new Date(time)).toDateString();\n    };\n\n    getOnlineStatus = () => {\n        const {time} = this.props;\n\n        return Date.now() - time < 5000;\n    };\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    render() {\n        return (\n            <div className=\"chat-header\">\n                <div className=\"chat-list-item-image\">\n                    <img src={this.props.avatar} alt=\"\"/>\n                    {\n                        this.getOnlineStatus() ?\n                            <Notify size={\"8\"} position={\"bottom-right\"} color=\"lawngreen\"/> : null\n                    }\n                </div>\n                <div className=\"chat-list-item-info\">\n                    <div className=\"chat-list-item-name\">\n                        {this.props.name}\n                    </div>\n                    <div className=\"chat-list-item-desc\">\n                        {this.getStatusWithTimestamp()}\n                    </div>\n                </div>\n                <div className=\"chat-close\" onClick={this.props.closeCurrentChat}>\n                    <i className=\"fas fa-times\"> </i>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ChatLine extends React.Component {\n    static propTypes = {\n        message: PropTypes.object,\n        chatType: PropTypes.string,\n    };\n\n    static contextTypes = {\n        showFullScreen: PropTypes.func,\n    };\n\n    static defaultProps = {\n        by: 0,\n    };\n\n    showFullScreen = () => {\n        const {message} = this.props;\n\n        if (message.type === 'image') {\n            this.context.showFullScreen(message.data.image, 'image');\n        } else if (message.type === 'video') {\n            this.context.showFullScreen(message.data.video, 'video');\n        }\n    };\n\n    getTime = () => {\n        const {message: {time}} = this.props;\n        let currentTime = new Date(time);\n\n        return `${currentTime.getHours()}:${currentTime.getMinutes()}`;\n    };\n\n    getConvertedMessage = (text) => {\n        const webPageRegex = /(?:(?:https?|ftp):\\/\\/|\\b(?:[a-z\\d]+\\.))(?:(?:[^\\s()<>]+|\\((?:[^\\s()<>]+|(?:\\([^\\s()<>]+\\)))?\\))+(?:\\((?:[^\\s()<>]+|(?:\\(?:[^\\s()<>]+\\)))?\\)|[^\\s`!()[\\]{};:'\".,<>?«»“”‘’]))?/;\n\n        let newText;\n        let link = null;\n        newText = text.split(/(\\s+)/).map((word, index) => {\n            if (word.match(webPageRegex)) {\n                link = word;\n                return (\n                    <a key={index} href={word} target=\"_blank\" rel=\"noopener noreferrer\">{word}</a>\n                );\n            }\n            return word;\n        });\n\n        return [newText, link];\n    };\n\n    render() {\n        const {message} = this.props;\n\n        let data = null;\n\n        if (message.type === \"text\") {\n            let linkAndMessage = this.getConvertedMessage(message.data);\n            data = (\n                <div>\n                    {\n                        linkAndMessage[1] ?\n                        <div className=\"chat-url_metadata\" onClick={this.showFullScreen}>\n                            <URLMetadata url={linkAndMessage[1]} />\n                        </div> : null\n                    }\n                    {linkAndMessage[0]}\n                </div>\n            );\n        } else if (message.type === \"image\") {\n            data = (\n                <div>\n                    <div className=\"chat-line-image\" onClick={this.showFullScreen}>\n                        <img src={message.data.image} alt=\"\"/>\n                    </div>\n                    {this.getConvertedMessage(message.data.caption)}\n                </div>\n            );\n        } else if (message.type === \"video\") {\n            data = (\n                <div>\n                    <div className=\"chat-line-video\" onClick={this.showFullScreen}>\n                        <img src={message.data.thumbnail} alt=\"\"/>\n                        <div className=\"chat-video-play-icon\">\n                            <i className=\"fa fa-play\"> </i>\n                        </div>\n                    </div>\n                    {this.getConvertedMessage(message.data.caption)}\n                </div>\n            );\n        }\n\n        let message_by = message.by === 0 ? \"me\" : \"you\";\n\n        let messageDeliveryStatus = null;\n\n        if (message.read === 0) {\n            messageDeliveryStatus = <i className=\"far fa-clock\"> </i>;\n        } else if (message.read === 1) {\n            messageDeliveryStatus = <i className=\"fas fa-check\"> </i>\n        } else if (message.read === 2) {\n            messageDeliveryStatus = <i className=\"fas fa-check-double\"> </i>\n        }\n\n        return (\n            <div className=\"chat-line\">\n                <div className={`chat-line-wrapper ${message_by}`}>\n                    {\n                        this.props.chatType === \"group\" && message.by !== 0 &&\n                        <div className={`chat-message_by ${message_by}`}>\n                            {message.by}\n                        </div>\n                    }\n                    {data}\n                    <div className={`chat-message-time ${message_by}`}>\n                        {this.getTime()}\n                        {\n                            message_by === \"me\" &&\n                            <div className=\"chat-message_delivery_status\">\n                                {messageDeliveryStatus}\n                            </div>\n                        }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ChatContent extends React.Component {\n    static propTypes = {\n        messages: PropTypes.array,\n        removeUnreadPointer: PropTypes.func,\n        currentChatId: PropTypes.number,\n        loadPreviousChat: PropTypes.func,\n        hasPreviousChat: PropTypes.bool,\n        chatType: PropTypes.string,\n    };\n\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.unreadPointer) {\n                this.unreadPointer.scrollIntoView({\n                    behavior: \"smooth\"\n                });\n            } else {\n                this.endPointer.scrollIntoView({\n                    behavior: \"smooth\"\n                });\n            }\n        }, 1000 / 60);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (!this.previousChatUpdate) {\n            setTimeout(() => {\n                if (this.unreadPointer) {\n                    this.unreadPointer.scrollIntoView({\n                        behavior: \"smooth\"\n                    });\n                } else {\n                    this.endPointer.scrollIntoView({\n                        behavior: \"smooth\"\n                    });\n                }\n            }, 1000 / 60);\n        }\n        this.previousChatUpdate = false;\n    }\n\n    UNSAFE_componentWillUpdate(nextProps, nextState, nextContext) {\n        if (this.unreadPointer) {\n            this.props.removeUnreadPointer(this.props.currentChatId);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.unreadPointer) {\n            this.props.removeUnreadPointer(this.props.currentChatId);\n        }\n    }\n\n    loadPreviousChat = () => {\n        this.previousChatUpdate = true;\n        this.props.loadPreviousChat(this.props.currentChatId);\n    };\n\n    createMessagesWithDateObjects = () => {\n        let {messages} = this.props;\n\n        let returnMessages = [];\n        let currentDate = 0;\n\n        for (let i = 0; i < messages.length; i++) {\n            let newDate = new Date(messages[i].time);\n\n            if (!messages[i].time\n                || (currentDate !== 0\n                    && currentDate.getFullYear() === newDate.getFullYear()\n                    && currentDate.getMonth() === newDate.getMonth()\n                    && currentDate.getDate() === newDate.getDate())) {\n            } else {\n                returnMessages.push({\n                    dateMarker: messages[i].time,\n                });\n                currentDate = newDate;\n            }\n            returnMessages.push(messages[i]);\n        }\n\n        return returnMessages;\n    };\n\n    getDate = (time) => {\n        let currentTime = new Date(time);\n\n        return `${currentTime.getDate()}/${currentTime.getMonth()}/${currentTime.getFullYear()}`;\n    };\n\n    render() {\n        const messages = this.createMessagesWithDateObjects();\n\n        return (\n            <div className=\"chat-content\">\n                {\n                    this.props.hasPreviousChat &&\n                    <div className=\"chat-load_previous\" onClick={this.loadPreviousChat}>\n                        Load Previous\n                    </div>\n                }\n                {\n                    messages.map(message => {\n                        if (message.unreadPointer) {\n                            return (\n                                <div\n                                    key=\"unreadPointer\"\n                                    className=\"chat-unread_messages\"\n                                    ref={(div) => {\n                                        this.unreadPointer = div;\n                                    }}\n                                >\n                                    Unread Messages\n                                </div>\n                            )\n                        } else if (message.dateMarker) {\n                            return (\n                                <div\n                                    key={`Date-${message.dateMarker}`}\n                                    className=\"chat-date_marker\"\n                                >\n                                    {this.getDate(message.dateMarker)}\n                                </div>\n                            )\n                        }\n                        return (\n                            <ChatLine\n                                message={message}\n                                key={message.id}\n                                chatType={this.props.chatType}\n                            />\n                        );\n                    })\n                }\n                <div\n                    ref={(div) => {\n                        this.endPointer = div;\n                    }}\n                >\n                </div>\n            </div>\n        );\n    }\n}\n\nclass EmojiPanelButton extends React.Component {\n    static propTypes = {\n        onEmojiSelect: PropTypes.func,\n    };\n\n    state = {\n        showEmojiPanel: false,\n    };\n\n    toggleEmojiPanel = () => {\n        this.setState({\n            showEmojiPanel: !this.state.showEmojiPanel,\n        });\n    };\n\n    render() {\n        const {onEmojiSelect, ...buttonProps} = this.props;\n        return (\n            <span style={{position: \"relative\"}}>\n            <button className=\"emoji\" onClick={this.toggleEmojiPanel} {...buttonProps}>\n                {this.props.children}\n            </button>\n                {\n                    this.state.showEmojiPanel ?\n                        <EmojiPicker\n                            set='google'\n                            style={{\n                                position: \"absolute\",\n                                bottom: \"30px\",\n                                right: \"0\",\n                            }}\n                            onSelect={onEmojiSelect}\n                        /> : null\n                }\n            </span>\n        );\n    }\n}\n\nclass ChatInput extends React.Component {\n    static propTypes = {\n        updateMessage: PropTypes.func,\n    };\n\n    state = {\n        message: \"\",\n        type: \"\",\n        link: null,\n    };\n\n    getLink = (text) => {\n        const webPageRegex = /(?:(?:https?|ftp):\\/\\/|\\b(?:[a-z\\d]+\\.))(?:(?:[^\\s()<>]+|\\((?:[^\\s()<>]+|(?:\\([^\\s()<>]+\\)))?\\))+(?:\\((?:[^\\s()<>]+|(?:\\(?:[^\\s()<>]+\\)))?\\)|[^\\s`!()[\\]{};:'\".,<>?«»“”‘’]))?/;\n\n        let link = null;\n        text.split(/(\\s+)/).forEach((word, index) => {\n            if (word.match(webPageRegex)) {\n                link = word;\n            }\n        });\n\n        return link;\n    };\n\n    onMessageInput = ({target: {value: message}}) => {\n        this.setState({\n            message,\n            type: \"text\",\n            link: this.getLink(message),\n        });\n    };\n\n    onMessageSubmit = (event) => {\n        event.preventDefault();\n        if (this.state.message === \"\") {\n            return;\n        }\n        const {updateMessage} = this.props;\n\n        let message = {\n            data: this.state.message,\n            type: this.state.type,\n            id: uuid.v4(),\n            by: 0,\n            time: Date.now(),\n            read: 0,\n        };\n\n        this.setState({\n            message: \"\",\n            type: \"\",\n            link: null,\n        });\n\n        updateMessage(message);\n    };\n\n    emojiUpdate = (emoji) => {\n        this.setState({\n            message: this.state.message + emoji.native,\n            type: \"text\",\n        });\n        this.messageInput.focus();\n    };\n\n\n\n    render() {\n        return (\n            <form onSubmit={this.onMessageSubmit}>\n                <div className=\"chat-input\">\n                    <span style={{position: \"relative\"}}>\n                        <input\n                            type=\"text\"\n                            onChange={this.onMessageInput}\n                            value={this.state.message}\n                            ref={(inp) => this.messageInput = inp}\n                            className=\"message_input\"\n                        />\n                        {\n                            this.state.link ?\n                            <div className=\"chat-input-link-metadata\">\n                                <URLMetadata key={this.state.link} url={this.state.link}/>\n                            </div> : null\n                        }\n                    </span>\n                    <button type=\"submit\" className=\"button\"><i className=\"far fa-paper-plane\"> </i></button>\n                    <button type=\"button\" className=\"button\"><i className=\"fas fa-paperclip\"> </i></button>\n                    <EmojiPanelButton type=\"button\" className=\"button\" onEmojiSelect={this.emojiUpdate}>\n                        <i className=\"far fa-smile\"> </i>\n                    </EmojiPanelButton>\n                </div>\n            </form>\n        );\n    }\n}\n\nclass ChatBody extends React.Component {\n    static propTypes = {\n        chat: PropTypes.object,\n        updateMessage: PropTypes.func,\n        closeCurrentChat: PropTypes.func,\n        removeUnreadPointer: PropTypes.func,\n        loadPreviousChat: PropTypes.func,\n    };\n\n    updateMessage = (message) => {\n        let {currentChatId} = this.props.chat;\n\n        this.props.updateMessage(currentChatId, message);\n    };\n\n\n    render() {\n        const {currentChatId} = this.props.chat;\n        const currentChat = this.props.chat.list.find(listItem => listItem.id === currentChatId);\n\n        return (\n            <div className=\"chat-body\">\n                {\n                    currentChatId ?\n                        <span>\n                        <ChatHeader\n                            name={currentChat.name}\n                            time={currentChat.lastSeen}\n                            avatar={currentChat.avatar}\n                            closeCurrentChat={this.props.closeCurrentChat}\n                        />\n                        <ChatContent\n                            hasPreviousChat={currentChat.hasPreviousChat}\n                            currentChatId={currentChatId}\n                            messages={currentChat.messages}\n                            removeUnreadPointer={this.props.removeUnreadPointer}\n                            loadPreviousChat={this.props.loadPreviousChat}\n                            chatType={currentChat.chatType}\n                        />\n                        <ChatInput\n                            updateMessage={this.updateMessage}\n                        />\n                    </span> : null\n                }\n            </div>\n        )\n    }\n}\n\nexport default class Chat extends React.Component {\n    static propTypes = {\n        chat: PropTypes.object.isRequired,\n        updateCurrentChat: PropTypes.func,\n        updateMessage: PropTypes.func,\n        closeCurrentChat: PropTypes.func,\n        removeUnreadPointer: PropTypes.func,\n        loadPreviousChat: PropTypes.func,\n    };\n\n    updateCurrentChat = (id) => {\n        this.props.updateCurrentChat(id);\n    };\n\n    render() {\n        return (\n            <div className=\"chat\">\n                <ChatList\n                    chat={this.props.chat}\n                    updateCurrentChat={this.updateCurrentChat}\n                />\n                <ChatBody\n                    chat={this.props.chat}\n                    updateMessage={this.props.updateMessage}\n                    closeCurrentChat={this.props.closeCurrentChat}\n                    removeUnreadPointer={this.props.removeUnreadPointer}\n                    loadPreviousChat={this.props.loadPreviousChat}\n                />\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport ReactPlayer from 'react-player';\nimport PropTypes from 'prop-types';\n\nimport \"../Assets/css/full-screen.css\";\n\nexport default class FullScreenView extends React.Component {\n    state = {\n        content: null,\n        type: null,\n        isFullScreen: false,\n    };\n\n    static childContextTypes = {\n        showFullScreen: PropTypes.func,\n    };\n\n    showFullScreen = (content, type) => {\n        this.setState({\n            content,\n            type,\n            isFullScreen: true,\n        });\n    };\n\n    hideFullScreen = () => {\n        this.setState({\n            content: null,\n            type: null,\n            isFullScreen: false,\n        });\n    };\n\n    getChildContext() {\n        return {\n            showFullScreen: this.showFullScreen,\n        }\n    }\n\n    render() {\n        const {children} = this.props;\n        let view = null;\n        if (this.state.isFullScreen) {\n            if (this.state.type === \"image\") {\n                view = (\n                    <div className=\"image-view\">\n                        <img src={this.state.content} alt=\"view\"/>\n                    </div>\n                );\n            } else if (this.state.type === \"video\") {\n                view = (\n                    <div className=\"image-view\">\n                        <ReactPlayer\n                            url={this.state.content}\n                            controls\n                            playing\n                            width='100%'\n                            height='100%'\n                        />\n                    </div>\n                );\n            }\n        }\n\n        return (\n            <div>\n                {children}\n                {\n                    this.state.isFullScreen ?\n                        <div className=\"full-screen\">\n                            <div\n                                className=\"exit\"\n                                onClick={this.hideFullScreen}\n                            >\n                                &times;\n                            </div>\n                            <div className=\"content centered\">\n                                {view}\n                            </div>\n                        </div> : null\n                }\n            </div>\n        );\n    }\n}","import React from 'react';\nimport Chat from './Components/Chat';\nimport URLMetadata from './Components/URLMetadata';\nimport uuid from 'uuid';\n\nimport './App.css';\nimport FullScreenView from \"./Components/FullScreenView\";\n\nclass App extends React.Component {\n    state = {\n        chat: {\n            list: [\n                {\n                    id: 1,\n                    name: \"Vishal\",\n                    avatar: require(\"./Assets/images/Avatar.png\"),\n                    messages: [\n                        {\n                            id: 1,\n                            by: \"you\",\n                            data: \"222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222\",\n                            time: 1, type: \"text\",\n                        },\n                        {\n                            id: 2,\n                            by: 0,\n                            data: \"2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222\",\n                            time: 2, type: \"text\",\n                            read: 0 // wait\n                        },\n                        {\n                            id: 3,\n                            by: 0,\n                            data: \"Hello\",\n                            time: 3,\n                            type: \"text\",\n                            read: 1 // delivered to server\n                        },\n                        {\n                            id: 4,\n                            by: \"you\",\n                            data: \"Hi\",\n                            time: 4,\n                            type: \"text\"\n                        },\n                        {\n                            unreadPointer: true,\n                        },\n                        {\n                            id: 5,\n                            by: 0,\n                            data: {\n                                image: require(\"./Assets/images/trial.png\"),\n                                caption: \"Another Caption for image\"\n                            },\n                            time: 5,\n                            type: \"image\",\n                            read: 2, // read\n                        },\n                        {\n                            id: 7,\n                            by: \"you\",\n                            data: {\n                                thumbnail: require(\"./Assets/images/trial.png\"),\n                                video: require(\"./Assets/videos/trial.mp4\"),\n                                caption: \"Avengers End Game\",\n                            },\n                            type: \"video\",\n                            time: 6,\n                        },\n                        {\n                            id: 6,\n                            by: 0,\n                            data: {\n                                image: require(\"./Assets/images/trial.png\"),\n                                caption: \"A best Avatar Caption\",\n                            },\n                            type: \"image\",\n                            time: 7,\n                        },\n                    ],\n                    lastSeen: Date.now(),\n                    unread: 3,\n                    hasPreviousChat: true,\n                    chatType: \"group\"\n                }, {\n                    id: 2,\n                    name: \"Vishnu\",\n                    avatar: require(\"./Assets/images/Avatar.png\"),\n                    messages: [\n                        {id: 1, by: 0, data: \"Hello\", time: 1, type: \"text\"},\n                        {id: 2, by: \"you\", data: \"Hi\", time: 2, type: \"text\"},\n                        {id: 3, by: 0, data: \"Hello\", time: 3, type: \"text\"},\n                        {id: 4, by: \"you\", data: \"Hi\", time: 4, type: \"text\"},\n                    ],\n                    lastSeen: 2,\n                    unread: 0,\n                    hasPreviousChat: false,\n                    chatType: \"individual\",\n                },\n            ],\n            currentChatId: null,\n        },\n    };\n\n    updateCurrentChat = (id) => {\n        this.setState((prevState) => {\n            return {\n                chat: {\n                    ...prevState.chat,\n                    currentChatId: id,\n                    list: prevState.chat.list.map(listItem => {\n                        if (listItem.id === id) {\n                            return {\n                                ...listItem,\n                                unread: 0,\n                            };\n                        }\n                        return listItem;\n                    }),\n                }\n            }\n        });\n    };\n\n    removeUnreadPointer = (id) => {\n        this.setState((prevState) => {\n            return {\n                chat: {\n                    ...prevState.chat,\n                    list: prevState.chat.list.map(listItem => {\n                        if (listItem.id === id) {\n                            return {\n                                ...listItem,\n                                messages: listItem.messages.filter(message => message.unreadPointer !== true),\n                            };\n                        }\n                        return listItem;\n                    }),\n                }\n            }\n        });\n    };\n\n    closeCurrentChat = () => {\n        this.setState({\n            chat: {\n                ...this.state.chat,\n                currentChatId: null,\n            }\n        })\n    };\n\n    loadPreviousChat = (id) => {\n        this.setState((prevState) => {\n            return {\n                chat: {\n                    ...prevState.chat,\n                    list: prevState.chat.list.map(listItem => {\n                        if (listItem.id === id) {\n                            return {\n                                ...listItem,\n                                messages: [\n                                    {id: uuid.v4(), by: 0, data: \"Previous Message\", time: 1, type: \"text\"},\n                                    {id: uuid.v4(), by: \"Arun\", data: \"Previous Message\", time: 1, type: \"text\"},\n                                    ...listItem.messages,\n                                ],\n                            };\n                        }\n                        return listItem;\n                    }),\n                }\n            }\n        });\n    };\n\n    updateMessage = (id, message) => {\n        const {id: message_id} = message;\n\n        this.setState((prevState) => {\n            return {\n                chat: {\n                    ...prevState.chat,\n                    list: prevState.chat.list.map(listItem => {\n                        if (listItem.id === id) {\n                            return {\n                                ...listItem,\n                                messages: [\n                                    ...listItem.messages,\n                                    message,\n                                ],\n                            };\n                        }\n                        return listItem;\n                    }),\n                }\n            };\n        });\n        setTimeout(() => {\n            this.setState((prevState) => {\n                return {\n                    chat: {\n                        ...prevState.chat,\n                        list: prevState.chat.list.map(listItem => {\n                            if (listItem.id === id) {\n                                return {\n                                    ...listItem,\n                                    messages: listItem.messages.map(message => {\n                                        if (message_id === message.id) {\n                                            return {\n                                                ...message,\n                                                read: 1,\n                                            }\n                                        }\n                                        return message;\n                                    }),\n                                };\n                            }\n                            return listItem;\n                        }),\n                    }\n                };\n            });\n        }, 2500)\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <FullScreenView>\n                    <Chat\n                        chat={this.state.chat}\n                        updateCurrentChat={this.updateCurrentChat}\n                        closeCurrentChat={this.closeCurrentChat}\n                        updateMessage={this.updateMessage}\n                        removeUnreadPointer={this.removeUnreadPointer}\n                        loadPreviousChat={this.loadPreviousChat}\n                    />\n                </FullScreenView>\n                {/*<URLMetadata url=\"https://www.whatsapp.com\"/>*/}\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}